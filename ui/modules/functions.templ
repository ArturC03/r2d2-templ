package modules

import "github.com/ArturC03/r2d2-templ/ui/components/code"

templ Functions() {
	<div id="functions" class="prose dark:prose-invert max-w-none">
		<h1>Functions</h1>
		<h2>Function Declaration</h2>
		<p>Define a function within a module:</p>
		<br/>
		@code.Code(code.Props{
			Language:       "js",
			ShowCopyButton: true,
		}) {
			{ `module Math {
    fn add(a, b) {
        return a + b;
    }
}` }
		}
		<br/>
		<h2>Function Parameters</h2>
		<p>Functions can take multiple parameters:</p>
		<br/>
		@code.Code(code.Props{
			Language:       "js",
			ShowCopyButton: true,
		}) {
			{ `module Utils {
    fn greet(name, greeting ) {
        return greeting + ", " + name + "!";
    }
}` }
		}
		<br/>
		<h2>Return Values</h2>
		<p>Functions can return values using the return statement:</p>
		<br/>
		@code.Code(code.Props{
			Language:       "js",
			ShowCopyButton: true,
		}) {
			{ `module Math {
    fn multiply(a, b) {
        return a * b;
    }

    fn divide(a, b) {
        if (b === 0 && a === 0) {
            return null;
        }
        return a / b;
    }
}` }
		}
		<br/>
		<h2>Pseudo-Functions</h2>
		<p>Pseudo-functions are functions that can only call other functions.</p>
		<br/>
		@code.Code(code.Props{
			Language:       "js",
			ShowCopyButton: true,
		}) {
			{ `module Utils {

	fn greet(name, greeting) {
		console.log(greeting + ", " + name + "!");
	}

	// it can only call other functions from its module
	pseudo fn main() {
        greet("Artur", "Hello");
    }
}` }
		}
		<br/>
		<p>The <strong>objective of pseudo-functions</strong> is to incentivize the use of functions and to make the code more <strong>readable</strong> and <strong>modular</strong>.</p>
		<p>It is <strong>particularly well-suited</strong> to projects involving multiple contributors, <strong>where organization is essential</strong>, as well as for solo developers seeking a reliable way to ensure their program remains modular.</p>
	</div>
}
